# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-11-03 01:00
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('slug', models.SlugField(max_length=200, verbose_name='slug')),
            ],
            options={
                'verbose_name_plural': 'calendar',
                'verbose_name': 'calendar',
            },
        ),
        migrations.CreateModel(
            name='CalendarRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField()),
                ('distinction', models.CharField(max_length=20, null=True, verbose_name='distinction')),
                ('inheritable', models.BooleanField(default=True, verbose_name='inheritable')),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.Calendar', verbose_name='calendar')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'calendar relations',
                'verbose_name': 'calendar relation',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(verbose_name='start')),
                ('end', models.DateTimeField(help_text='The end time must be later than the start time.', verbose_name='end')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('remind', models.IntegerField(default=0, help_text='事件发生前提醒；0不提醒，其他的可以写具体分钟数', verbose_name='提醒时间')),
                ('state', models.SmallIntegerField(choices=[(0, '待上课'), (1, '已结课')], default=0, verbose_name='课程状态')),
                ('ctime', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('utime', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('end_recurring_period', models.DateField(blank=True, help_text='This date is ignored for one time only events.', null=True, verbose_name='end recurring period')),
                ('times', models.SmallIntegerField(default=0, help_text='重复次数，当事件出现重复时需要上传', verbose_name='重复次数')),
                ('custom', models.CharField(blank=True, help_text='星期间隔，MO, TU, WE, TH, FR, SA, SU', max_length=500, null=True, verbose_name='自定制规则')),
                ('color_event', models.CharField(blank=True, max_length=10, null=True, verbose_name='Color event')),
                ('calendar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.Calendar', verbose_name='calendar')),
                ('coach', models.ForeignKey(blank=True, help_text='As coach', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coach_user', to=settings.AUTH_USER_MODEL, verbose_name='coach')),
            ],
            options={
                'verbose_name_plural': 'events',
                'verbose_name': 'event',
            },
        ),
        migrations.CreateModel(
            name='PurchaseCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=0, verbose_name='课程总量')),
                ('remain', models.IntegerField(default=0, verbose_name='剩余课程')),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('utime', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '已购课程',
                'verbose_name': '已购课程',
                'db_table': 'purchase_course',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('frequency', models.CharField(choices=[('YEARLY', 'Yearly'), ('MONTHLY', 'Monthly'), ('WEEKLY', 'Weekly'), ('DAILY', 'Daily'), ('HOURLY', 'Hourly')], max_length=10, verbose_name='frequency')),
                ('params', models.TextField(blank=True, null=True, verbose_name='params')),
                ('is_public', models.BooleanField(default=False, verbose_name='is public')),
            ],
            options={
                'verbose_name_plural': 'rules',
                'verbose_name': 'rule',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='rule',
            field=models.ForeignKey(blank=True, help_text="Select '----' for a one time only event.", null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.Rule', verbose_name='rule'),
        ),
        migrations.AddField(
            model_name='event',
            name='user',
            field=models.ForeignKey(blank=True, help_text='As member', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_user', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
    ]
